# IDEA: —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫–∂–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
import shelve
import requests
import logging

from aiogram import Bot
from aiogram.utils.json import json

from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, \
    InlineKeyboardButton, MessageEntity, Message, CallbackQuery, ReplyKeyboardRemove
import validators

import files
from extensions import Settings
from models import Author, Admin, Post, BlockedUser, Phrase, User
from config import admin_id
from defs import get_admin_list, log, new_admin, get_state, del_id, get_moder_list, new_moder, \
    get_author_list, new_author, get_csv, delete_state, set_state, preview, edit_post, change_settings, \
    set_chat_value_message, delete_chat_value_message, get_chat_value_message, \
    get_blocked_user_list, new_blocked_user, \
    emoji_count, entity_read

# set logging level
logging.basicConfig(filename=files.system_log, format='%(levelname)s:%(name)s:%(asctime)s:%(message)s',
                    datefmt='%d.%m.%Y %I:%M:%S %p', level=logging.INFO)

main_menu = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'


async def first_launch() -> bool:
    try:
        with open(files.working_log, encoding='utf-8') as f:
            return False
    except:
        return True


async def panel(bot: Bot, message: Message, first__launch: bool = False) -> None:
    current_user = object

    for table in [Admin, Author, BlockedUser]:
        for obj in table.select():
            if obj.profile.user_id == message.chat.id:
                current_user = obj
                break

    if isinstance(current_user, BlockedUser):
        await bot.send_message(message.chat.id, "–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!")
        delete_state(message.chat.id)
    elif isinstance(current_user, (Admin, Author)) or message.chat.id == admin_id:
        user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
        user_markup.row('–ü–æ—Å—Ç—ã')
        user_markup.row('–°–ø–∏—Å–∫–∏')

        if current_user.permissions == 'admin_permissions' or message.chat.id == admin_id:
            user_markup.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞')

            await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω {message.chat.username}!\n",
                                   reply_markup=ReplyKeyboardRemove())
            await bot.send_message(message.chat.id, "–Ø HareGems-–±–æ—Ç!\n"
                                                    "–ü—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ–Ω—è –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ "
                                                    "HareCrypta - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –ò–¥–µ–π!\n"
                                                    "–ü–æ –∫–æ–º–∞–Ω–¥–µ /help –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å "
                                                    "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            await log(f'Admin {message.chat.id} started bot')
        elif current_user.permissions == 'moder_permissions':
            await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {message.chat.username}!")
            await bot.send_message(message.chat.id, "–Ø HareGems-–±–æ—Ç!\n"
                                                    "–ü—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ–Ω—è –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ "
                                                    "HareCrypta - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –ò–¥–µ–π!\n"
                                                    "–ü–æ –∫–æ–º–∞–Ω–¥–µ /help –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å "
                                                    "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            await log(f'Moder {message.chat.id} started bot')
        elif current_user.permissions == 'author_permissions':
            await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, –ê–≤—Ç–æ—Ä {message.chat.username}!")
            await bot.send_message(message.chat.id, "–Ø HareGems-–±–æ—Ç!\n"
                                                    "–ü—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ–Ω—è –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ "
                                                    "HareCrypta - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –ò–¥–µ–π!\n"
                                                    "–ü–æ –∫–æ–º–∞–Ω–¥–µ /help –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å "
                                                    "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            await log(f'Author {message.chat.id} started bot')

        if first__launch:
            await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.",
                                   reply_markup=user_markup)
            await log(f'First launch bot panel by user {message.chat.id}')
        else:
            await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=user_markup)

            await log(f'Launch bot panel by user {message.chat.id}')
    else:
        entity_list = []
        entity = MessageEntity(type="text_link",
                               offset=len("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                          "–ø—Ä–æ—è–≤–∏—Ç–µ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ "),
                               length=len('HareCrypta'),
                               url='https://t.me/harecrypta_chat')
        entity_list.append(entity)
        await bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                                "–ø—Ä–æ—è–≤–∏—Ç–µ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ HareCrypta.",
                               entities=entity_list, disable_web_page_preview=True)


async def in_bot_panel(bot: Bot, settings: Settings, message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π: –≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥,
    –≤–æ –≤—Ç–æ—Ä–æ–π - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏.
    –í–Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á –æ—Ç Combot.
    –°–æ—Å—Ç–æ—è–Ω–∏–µ 55 –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ –∫–ª—é—á–∞.

    –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏—è 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
    1 - –≤–≤–æ–¥ —Ç–µ–º—ã –ø–æ—Å—Ç–∞,
    2 - –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è,
    3 - –≤–≤–æ–¥ –¥–∞—Ç—ã –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω–∞,
    4 - –≤–≤–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —É—á–∞—Å—Ç–∏—è,
    5 - –≤–≤–æ–¥ —Å–∞–π—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞,
    6 - –≤–≤–æ–¥ —Ç–≤–∏—Ç—Ç–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞,
    7 - –≤–≤–æ–¥ –¥–∏—Å–∫–æ—Ä–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞,
    8 - –≤—Å—Ç–∞–≤–∫–∞ –±–∞–Ω–Ω–µ—Ä–∞,
    9 - –≤–≤–æ–¥ —Ö—ç—à—Ç–µ–≥–æ–≤,
    10 - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞

    –ü—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏—è 90:
    90 - –≤—ã–≤–æ–¥ –Ω–µ—Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤

    –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ 11:
    11 - –≤—ã–±–æ—Ä –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ - —Å–æ—Å—Ç–æ—è–Ω–∏—è 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
    (120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220 —Å–æ—Å—Ç–æ—è–Ω–∏—è
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º):
    12 - –≤—ã–±–æ—Ä –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö,
    13 - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞,
    14 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –ø–æ—Å—Ç–∞,
    15 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞,
    16 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å—Ç–∞,
    17 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —É—á–∞—Å—Ç–∏—é,
    18 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞,
    19 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–≤–∏—Ç—Ç–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞,
    20 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–æ—Ä–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞,
    21 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞,
    22 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤

    –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–≤—Ç–æ—Ä–æ–≤ - —Å–æ—Å—Ç–æ—è–Ω–∏—è 31, 32:
    31 - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞,
        –≥–¥–µ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤ )
    32 - —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤)

    –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–æ–≤ - —Å–æ—Å—Ç–æ—è–Ω–∏—è 41, 42:
    41 - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞,
        –≥–¥–µ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤)
    42 - —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤)

    –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ - —Å–æ—Å—Ç–æ—è–Ω–∏—è 51, 52:
    51 - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞,
        –≥–¥–µ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤)
    52 - —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤)

    –ü—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞ - —Å–æ—Å—Ç–æ—è–Ω–∏–µ 61, 62:
    61 - –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–≤–æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ /help
    62 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∂–Ω–µ–π –ø–æ–¥–ø–∏—Å–∏ –∫ –ø–æ—Å—Ç–∞–º
    63 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –æ–ø—ã—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤


    :param bot: Bot from aiogram
    :param settings: object class: Settings from extensions.py
    :param message: types.Message from aiogram
    :return: None
    """

    if get_state(message.chat.id) == 55 and message.chat.id == admin_id:
        if 'https://combot.org/api/one_time_auth?hash=' in message.text:
            settings.url_one_time_link = message.text

            try:
                settings.session.get(settings.url_one_time_link, timeout=(3, 6))
            except Exception as e:
                logging.error(e)
            else:
                if await get_csv(settings):
                    logging.info('Session was opened')
                    delete_state(message.chat.id)

                    await bot.send_message(admin_id, '–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
                else:
                    await bot.send_message(admin_id, '–î–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n'
                                                     '–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º –∫–ª—é—á–æ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ csv —Ñ–∞–π–ª—É! '
                                                     '–ü–æ–ª—É—á–∏—Ç–µ –µ—ë —É Combot –ø–æ –∫–æ–º–∞–Ω–¥–µ /onetime.')
                    set_state(admin_id, 55)
        else:
            await bot.send_message(admin_id, '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ csv —Ñ–∞–π–ª—É.')
            return

    current_user = object

    for table in [Admin, Author, BlockedUser]:
        for obj in table.select():
            if obj.profile.user_id == message.chat.id:
                current_user = obj
                break

    if isinstance(current_user, BlockedUser):
        await bot.send_message(message.chat.id, "–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!")
        delete_state(message.chat.id)
    elif isinstance(current_user, (Admin, Author)) or message.chat.id == admin_id:
        if message.text == main_menu:
            await bot.delete_message(message.chat.id, message.message_id)
            if get_state(message.chat.id):
                delete_state(message.chat.id)
            if get_chat_value_message(message):
                delete_chat_value_message(message)
            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            user_markup.row('–ü–æ—Å—Ç—ã')
            user_markup.row('–°–ø–∏—Å–∫–∏')
            if current_user.permissions == 'admin_permissions':
                user_markup.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞')

            await bot.send_message(message.chat.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞.',
                                   reply_markup=user_markup)

        elif message.text == '–ü–æ—Å—Ç—ã':
            await bot.delete_message(message.chat.id, message.message_id)
            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç', '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç')
            user_markup.row('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤', '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤')
            user_markup.row(main_menu)

            entity_list = []
            count_string_track = len('–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n')
            result_text = '–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n'
            a = 0

            try:
                if isinstance(current_user, Author):
                    posts = Post.select().where(Post.author == current_user.profile)
                else:
                    posts = Post.select()
            except Exception as e:
                logging.warning(e)
            else:
                for post in posts:
                    a += 1
                    count_string_track += len(str(a)) + 2
                    name_entities = json.loads(str(post.name_entities))

                    if "entities" in name_entities:
                        entity_list = entity_read(name_entities, entity_list, count_string_track)

                    count_string_track += len(post.post_name) + 3 + emoji_count(str(post.post_name))

                    count_string_track += len(post.author.username) + 3 + \
                                          len('Posted' if post.status else 'Not posted') + 1

                    result_text += str(a) + '. ' + str(post.post_name) + ' - ' + \
                                   str(post.author.username) + \
                                   ' - ' + str('Posted' if post.status else 'Not posted') + '\n'

                    if a % 10 == 0:
                        await bot.send_message(
                            message.chat.id,
                            result_text,
                            reply_markup=user_markup,
                            entities=entity_list)
                        entity_list = []
                        count_string_track = len('–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n')
                        result_text = '–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n'

            if a == 0:
                result_text = "–ü–æ—Å—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã!"
            else:
                pass

            await bot.send_message(message.chat.id, result_text, reply_markup=user_markup, entities=entity_list)

        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç':
            await bot.delete_message(message.chat.id, message.message_id)
            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            user_markup.row(main_menu)

            with open(files.example_text, encoding='utf-8') as example_text:
                example_text = example_text.read()

            example_entities = []
            raw_entities = [{"type": "bold", "offset": 0, "length": 46},
                            {"type": "underline", "offset": 0, "length": 46},
                            {"type": "code", "offset": 46, "length": 27},
                            {"type": "bold", "offset": 73, "length": 23},
                            {"type": "pre", "offset": 96, "length": 31},
                            {"type": "text_link", "offset": 127, "length": 10,
                             "url": "https://t.me/harecrypta"},
                            {"type": "text_link", "offset": 236, "length": 3,
                             "url": "https://t.me/harecrypta_chat"},
                            {"type": "pre", "offset": 492, "length": 36},
                            {"type": "italic", "offset": 528, "length": 1},
                            {"type": "text_link", "offset": 598, "length": 5,
                             "url": "https://t.me/harecrypta"},
                            {"type": "text_link", "offset": 635, "length": 4,
                             "url": "https://t.me/harecrypta_chat"},
                            {"type": "text_link", "offset": 669, "length": 16,
                             "url": "https://t.me/HareCrypta_lab_ann"},
                            {"type": "text_link", "offset": 719, "length": 9,
                             "url": "https://www.youtube.com/c/Harecrypta"},
                            {"type": "pre", "offset": 728, "length": 35},
                            {"type": "italic", "offset": 763, "length": 2},
                            {"type": "pre", "offset": 783, "length": 25},
                            {"type": "text_link", "offset": 808, "length": 15,
                             "url": "http://www.google.com/"},
                            {"type": "text_link", "offset": 826, "length": 7,
                             "url": "http://twitter.com/"},
                            {"type": "text_link", "offset": 836, "length": 7,
                             "url": "http://discord.com/"},
                            {"type": "pre", "offset": 845, "length": 24},
                            {"type": "hashtag", "offset": 869, "length": 11},
                            {"type": "hashtag", "offset": 881, "length": 10},
                            {"type": "hashtag", "offset": 892, "length": 7},
                            {"type": "italic", "offset": 901, "length": 22},
                            {"type": "code", "offset": 924, "length": 13},
                            {"type": "bold", "offset": 937, "length": 10},
                            {"type": "text_link", "offset": 950, "length": 5,
                             "url": "https://t.me/harecrypta"},
                            {"type": "text_link", "offset": 958, "length": 3,
                             "url": "https://t.me/harecrypta_chat"},
                            {"type": "text_link", "offset": 964, "length": 7,
                             "url": "https://www.youtube.com/c/Harecrypta"},
                            {"type": "text_link", "offset": 974, "length": 9,
                             "url": "https://instagram.com/harecrypta"}]

            for entity in raw_entities:
                if entity["type"] == "text_link":
                    entity = MessageEntity(type=entity["type"],
                                           offset=entity["offset"],
                                           length=entity["length"], url=entity["url"])
                    example_entities.append(entity)
                elif entity["type"] in ["mention", "url", "hashtag", "cashtag", "bot_command",
                                        "email", "phone_number", "bold", "italic", "underline",
                                        "strikethrough", "code", "pre"]:
                    entity = MessageEntity(type=entity["type"],
                                           offset=entity["offset"],
                                           length=entity["length"])
                    example_entities.append(entity)

            photo = open(files.photo_example, 'rb')
            await bot.send_photo(message.chat.id, photo, caption=example_text, caption_entities=example_entities)

            await bot.send_message(message.chat.id,
                                   '–ü–æ—Ä—è–¥–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞: \n'
                                   '- –≤–≤–æ–¥ —Ç–µ–º—ã –ø–æ—Å—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n'
                                   '- –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n'
                                   '- *–≤–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n'
                                   '- *–≤–≤–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —É—á–∞—Å—Ç–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n'
                                   '- **–≤–≤–æ–¥ —Å–∞–π—Ç–∞, **–≤–≤–æ–¥ —Ç–≤–∏—Ç—Ç–µ—Ä–∞, **–≤–≤–æ–¥ –¥–∏—Å–∫–æ—Ä–¥–∞\n'
                                   '- –≤—ã–±–æ—Ä –±–∞–Ω–Ω–µ—Ä–∞ –ø–æ—Å—Ç–∞ '
                                   '((–ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É (—Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è), '
                                   '–µ—Å–ª–∏ –±–∞–Ω–Ω–µ—Ä–∞ –Ω–µ—Ç, —Ç–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /empty))\n'
                                   '- –≤–≤–æ–¥ —Ö—ç—à—Ç–µ–≥–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n'
                                   '* - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä (–Ω–∞–∂–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É "–î–∞" –∏–ª–∏ "–ù–µ—Ç")\n'
                                   '** - –∫—Ä–æ–º–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ —Ç–∞–∫–∂–µ '
                                   '—É—á–∏—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —ç—Ç–æ —Å–∞–π—Ç, —Ç–æ http://example.com)'
                                   )

            await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞', reply_markup=user_markup)
            set_state(message.chat.id, 1)

        elif message.text == '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤':
            await bot.delete_message(message.chat.id, message.message_id)

            try:
                if isinstance(current_user, Author):
                    posts = Post.select().where(Post.author == current_user.profile)
                else:
                    posts = Post.select()
            except Exception as e:
                logging.warning(e)
            else:
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                a = 0
                for post in posts:
                    if not post.status:
                        a += 1
                        user_markup.row(str(post.post_name))

                if a == 0:
                    await bot.send_message(message.chat.id, '–ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç!', reply_markup=user_markup)
                else:
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –ø–æ—Å—Ç —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å?',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    set_state(message.chat.id, 90)

        elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤':
            await bot.delete_message(message.chat.id, message.message_id)

            try:
                if isinstance(current_user, Author):
                    posts = Post.select().where(Post.author == current_user.profile)
                else:
                    posts = Post.select()
            except Exception as e:
                logging.warning(e)
            else:
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                a = 0
                for post in posts:
                    a += 1
                    user_markup.row(str(post.post_name))
                if a == 0:
                    await bot.send_message(message.chat.id, '–ù–∏–∫–∞–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ!', reply_markup=user_markup)
                else:
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –ø–æ—Å—Ç —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    set_state(message.chat.id, 12)

        elif message.text == '–ù–∞–∑–∞–¥':
            await bot.delete_message(message.chat.id, message.message_id)
            if get_state(message.chat.id) in [14, 15, 16, 17, 18, 19, 20, 21, 22]:
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                user_markup.row(main_menu)
                await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                       reply_markup=user_markup)
                set_state(message.chat.id, 13)
            elif get_state(message.chat.id) in [140, 150, 160, 170, 180, 190, 200, 210, 220]:
                edition_post = get_chat_value_message(message)

                if await preview(bot, message, edition_post, settings):
                    key = InlineKeyboardMarkup()
                    key.row(InlineKeyboardButton(text='–î–ê', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
                            InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç'))
                    key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                 callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                    await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=key)
                else:
                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                           reply_markup=user_markup)
                    set_state(message.chat.id, 130)

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É':
            await bot.delete_message(message.chat.id, message.message_id)
            if get_state(message.chat.id) in [13, 130]:
                edition_post = get_chat_value_message(message)
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ù–∞–∑–∞–¥')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –ø–æ—Å—Ç–∞',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    if get_state(message.chat.id) == 13:
                        set_state(message.chat.id, 14)
                    elif get_state(message.chat.id) == 130:
                        set_state(message.chat.id, 140)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–æ–π —Ç–µ–º–æ–π –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':
            await bot.delete_message(message.chat.id, message.message_id)
            if get_state(message.chat.id) in [13, 130]:
                edition_post = get_chat_value_message(message)
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ù–∞–∑–∞–¥')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    if get_state(message.chat.id) == 13:
                        set_state(message.chat.id, 15)
                    elif get_state(message.chat.id) == 130:
                        set_state(message.chat.id, 150)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É':
            await bot.delete_message(message.chat.id, message.message_id)
            if get_state(message.chat.id) in [13, 130]:
                edition_post = get_chat_value_message(message)
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ù–∞–∑–∞–¥')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –ø–æ—Å—Ç–∞ '
                                                            '–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /empty, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    if get_state(message.chat.id) == 13:
                        set_state(message.chat.id, 16)
                    elif get_state(message.chat.id) == 130:
                        set_state(message.chat.id, 160)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–æ–π –¥–∞—Ç–æ–π –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è':
            await bot.delete_message(message.chat.id, message.message_id)
            if get_state(message.chat.id) in [13, 130]:
                edition_post = get_chat_value_message(message)
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ù–∞–∑–∞–¥')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —É—á–∞—Å—Ç–∏—è '
                                                            '–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /empty, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    if get_state(message.chat.id) == 13:
                        set_state(message.chat.id, 17)
                    elif get_state(message.chat.id) == 130:
                        set_state(message.chat.id, 170)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞':
            await bot.delete_message(message.chat.id, message.message_id)
            if get_state(message.chat.id) in [13, 130]:
                edition_post = get_chat_value_message(message)
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ù–∞–∑–∞–¥')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞ '
                                                            '–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /empty, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    if get_state(message.chat.id) == 13:
                        set_state(message.chat.id, 18)
                    elif get_state(message.chat.id) == 130:
                        set_state(message.chat.id, 180)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º–∏ —Å–∞–π—Ç–æ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä':
            await bot.delete_message(message.chat.id, message.message_id)
            if get_state(message.chat.id) in [13, 130]:
                edition_post = get_chat_value_message(message)
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ù–∞–∑–∞–¥')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–≤–∏—Ç—Ç–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ '
                                                            '–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /empty, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    if get_state(message.chat.id) == 13:
                        set_state(message.chat.id, 19)
                    elif get_state(message.chat.id) == 130:
                        set_state(message.chat.id, 190)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º–∏ —Ç–≤–∏—Ç—Ç–µ—Ä–æ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥':
            await bot.delete_message(message.chat.id, message.message_id)
            if get_state(message.chat.id) in [13, 130]:
                edition_post = get_chat_value_message(message)
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ù–∞–∑–∞–¥')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏—Å–∫–æ—Ä–¥ –ø—Ä–æ–µ–∫—Ç–∞ '
                                                            '–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /empty, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    if get_state(message.chat.id) == 13:
                        set_state(message.chat.id, 20)
                    elif get_state(message.chat.id) == 130:
                        set_state(message.chat.id, 200)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º–∏ –¥–∏—Å–∫–æ—Ä–¥–æ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä':
            await bot.delete_message(message.chat.id, message.message_id)
            if get_state(message.chat.id) in [13, 130]:
                edition_post = get_chat_value_message(message)
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ù–∞–∑–∞–¥')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í—Å—Ç–∞–≤—å—Ç–µ –±–∞–Ω–Ω–µ—Ä (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –ø–æ—Å—Ç–∞.'
                                                            '–ò–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –±–∞–Ω–Ω–µ—Ä–∞, —Ç–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /empty',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    if get_state(message.chat.id) == 13:
                        set_state(message.chat.id, 21)
                    elif get_state(message.chat.id) == 130:
                        set_state(message.chat.id, 210)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –±–∞–Ω–Ω–µ—Ä–æ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏':
            await bot.delete_message(message.chat.id, message.message_id)
            if get_state(message.chat.id) in [13, 130]:
                edition_post = get_chat_value_message(message)
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ù–∞–∑–∞–¥')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ö—ç—à—Ç–µ–≥–∏',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    if get_state(message.chat.id) == 13:
                        set_state(message.chat.id, 22)
                    elif get_state(message.chat.id) == 130:
                        set_state(message.chat.id, 220)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º–∏ —Ö—ç—à—Ç–µ–≥–∞–º–∏ –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif message.text == '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç':
            await bot.delete_message(message.chat.id, message.message_id)

            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            a = 0
            try:
                if isinstance(current_user, Author):
                    posts = Post.select().where(Post.author == current_user.profile)
                else:
                    posts = Post.select()
            except Exception as e:
                logging.warning(e)
            else:
                for post in posts:
                    a += 1
                    user_markup.row(str(post.post_name))
                if a == 0:
                    await bot.send_message(message.chat.id, '–ù–∏–∫–∞–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ!', reply_markup=user_markup)
                else:
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –ø–æ—Å—Ç –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å?',
                                           parse_mode='Markdown', reply_markup=user_markup)
                    set_state(message.chat.id, 11)

        elif message.text == '–°–ø–∏—Å–∫–∏':
            await bot.delete_message(message.chat.id, message.message_id)
            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            user_markup.row('–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤', '–£–¥–∞–ª—ë–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã')
            user_markup.row('–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤', '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤')
            user_markup.row(main_menu)

            await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", reply_markup=user_markup)

        elif message.text == '–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤':
            await bot.delete_message(message.chat.id, message.message_id)
            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            if isinstance(current_user, Admin):
                user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞', '–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞')
            user_markup.row(main_menu)
            a = 0

            authors = "–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤:\n\n"
            if len(get_author_list()) != 0:
                for author in get_author_list():
                    a += 1
                    authors += f"{a}. {author[0]} - @{author[1]} - {author[2]} XP\n"

                    if a % 50 == 0:
                        await bot.send_message(message.chat.id, authors, reply_markup=user_markup, parse_mode="HTML")
                        authors = ''

                await bot.send_message(message.chat.id, authors, reply_markup=user_markup, parse_mode="HTML")
            else:
                await bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Ä–æ–≤ –µ—â–µ –Ω–µ—Ç", reply_markup=user_markup)

        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞':
            if isinstance(current_user, Admin):
                await bot.delete_message(message.chat.id, message.message_id)
                key = InlineKeyboardMarkup()
                key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                             callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                await bot.send_message(message.chat.id, '–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,'
                                                        '–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–º', reply_markup=key)
                set_state(message.chat.id, 31)
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif message.text == '–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞':
            if isinstance(current_user, Admin):
                await bot.delete_message(message.chat.id, message.message_id)
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                a = 0
                for author in get_author_list():
                    a += 1
                    user_markup.row(f"{author[0]} - @{author[1]} - {author[2]} XP\n")
                if a == 0:
                    await bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –∞–≤—Ç–æ—Ä–æ–≤!')
                else:
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∞–≤—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å',
                                           reply_markup=user_markup)
                    set_state(message.chat.id, 32)
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif message.text == '–£–¥–∞–ª—ë–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã':
            await bot.delete_message(message.chat.id, message.message_id)
            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            user_markup.row(main_menu)
            a = 0

            authors = "–£–¥–∞–ª—ë–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã:\n\n"
            if len(get_blocked_user_list()) != 0:
                for author in get_blocked_user_list():
                    a += 1
                    authors += f"{a}. {author[0]} - {author[1]} - @{author[2]}\n"

                    if a % 50 == 0:
                        await bot.send_message(message.chat.id, authors, reply_markup=user_markup, parse_mode="HTML")
                        authors = ''

                await bot.send_message(message.chat.id, authors, reply_markup=user_markup, parse_mode="HTML")
            else:
                await bot.send_message(message.chat.id, "–£–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –µ—â–µ –Ω–µ—Ç", reply_markup=user_markup)

        elif message.text == '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤':
            await bot.delete_message(message.chat.id, message.message_id)
            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            if isinstance(current_user, Admin):
                user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞', '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞')
            user_markup.row(main_menu)
            a = 0

            admins = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n"
            if len(get_admin_list()) != 0:
                for admin in get_admin_list():
                    a += 1
                    admins += f"{a}. {admin[0]} - @{admin[1]}\n"

                    if a % 50 == 0:
                        await bot.send_message(message.chat.id, admins, reply_markup=user_markup, parse_mode="HTML")
                        admins = ''

                await bot.send_message(message.chat.id, admins, reply_markup=user_markup, parse_mode="HTML")
            else:
                await bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω–æ–≤ –µ—â–µ –Ω–µ—Ç", reply_markup=user_markup)

        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞':
            if isinstance(current_user, Admin) and current_user.permissions == 'admin_permissions':
                await bot.delete_message(message.chat.id, message.message_id)
                key = InlineKeyboardMarkup()
                key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                             callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                await bot.send_message(message.chat.id, '–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,'
                                                        '–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º', reply_markup=key)
                set_state(message.chat.id, 41)
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif message.text == '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞':
            if isinstance(current_user, Admin) and current_user.permissions == 'admin_permissions':
                await bot.delete_message(message.chat.id, message.message_id)
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                a = 0
                for admin in get_admin_list():
                    a += 1
                    if int(admin[0]) != admin_id: user_markup.row(f"{str(admin[0])} - {admin[1]}")
                if a == 0:
                    await bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –∞–¥–º–∏–Ω–æ–≤!')
                else:
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å',
                                           reply_markup=user_markup)
                    set_state(message.chat.id, 42)
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif message.text == '–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤':
            await bot.delete_message(message.chat.id, message.message_id)
            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            if isinstance(current_user, Admin):
                user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', '–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')
            user_markup.row(main_menu)
            a = 0

            moders = "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            if len(get_moder_list()) != 0:
                for moder in get_moder_list():
                    a += 1
                    moders += f"{a}. {moder[0]} - @{moder[1]}\n"

                    if a % 50 == 0:
                        await bot.send_message(message.chat.id, moders, reply_markup=user_markup, parse_mode="HTML")
                        moders = ''

                await bot.send_message(message.chat.id, moders, reply_markup=user_markup, parse_mode="HTML")
            else:
                await bot.send_message(message.chat.id, "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –µ—â–µ –Ω–µ—Ç", reply_markup=user_markup)

        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞':
            if isinstance(current_user, Admin):
                await bot.delete_message(message.chat.id, message.message_id)
                key = InlineKeyboardMarkup()
                key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                             callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                await bot.send_message(message.chat.id, '–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–∞, '
                                                        '—á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.', reply_markup=key)
                set_state(message.chat.id, 51)
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif message.text == '–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞':
            if isinstance(current_user, Admin):
                await bot.delete_message(message.chat.id, message.message_id)
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                a = 0
                for moder in get_moder_list():
                    a += 1
                    user_markup.row(f'{str(moder[0])} - {moder[1]}')
                if a == 0:
                    await bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!')
                else:
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ id –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å',
                                           reply_markup=user_markup)
                    set_state(message.chat.id, 52)
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif message.text == '–°–∫–∞—á–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª':
            if isinstance(current_user, Admin) and current_user.permissions == 'admin_permissions':
                await bot.delete_message(message.chat.id, message.message_id)
                with open(files.working_log, 'rb') as working_log:
                    await bot.send_document(message.chat.id, working_log)
                with open(files.system_log, 'rb') as system_log:
                    await bot.send_document(message.chat.id, system_log)
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞':
            if isinstance(current_user, Admin) and current_user.permissions == 'admin_permissions':
                await bot.delete_message(message.chat.id, message.message_id)
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)

                user_markup.row(f'–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.time_zone}')
                user_markup.row(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {settings.channel_name}')
                user_markup.row(f'–ü–æ—Ä–æ–≥ –æ–ø—ã—Ç–∞ –∞–≤—Ç–æ—Ä–∞–º: {settings.threshold_xp}')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /help')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∂–Ω—é—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–æ—Å—Ç–æ–≤')
                user_markup.row('–°–∫–∞—á–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª')
                user_markup.row('–°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î')
                user_markup.row('–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î')
                user_markup.row(main_menu)

                await bot.send_message(message.chat.id, "–í—ã –≤–æ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", reply_markup=user_markup,
                                       parse_mode="HTML")
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /help':
            if isinstance(current_user, Admin) and current_user.permissions == 'admin_permissions':
                await bot.delete_message(message.chat.id, message.message_id)
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row(main_menu)
                help_entities = []

                help_text = settings.help_text
                raw_entities = json.loads(str(settings.help_text_entities))

                if "entities" in raw_entities:

                    for entity in raw_entities["entities"]:
                        entity_values_list = list(entity.values())

                        if entity["type"] == "text_link":
                            entity = MessageEntity(type=entity_values_list[0],
                                                   offset=entity_values_list[1],
                                                   length=entity_values_list[2], url=entity_values_list[3])
                        elif entity["type"] in ["mention", "url", "hashtag", "cashtag", "bot_command",
                                                "email", "phone_number", "bold", "italic", "underline",
                                                "strikethrough", "code", "pre"]:
                            entity = MessageEntity(type=entity_values_list[0],
                                                   offset=entity_values_list[1],
                                                   length=entity_values_list[2])
                        help_entities.append(entity)

                await bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ help —Ç–∞–∫–æ–µ:")
                await bot.send_message(message.chat.id, help_text, entities=help_entities, reply_markup=user_markup)
                await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã help:")

                set_state(message.chat.id, 61)
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∂–Ω—é—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–æ—Å—Ç–æ–≤':
            if isinstance(current_user, Admin) and current_user.permissions == 'admin_permissions':
                await bot.delete_message(message.chat.id, message.message_id)
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row(main_menu)
                footer_entities = []

                footer_text = settings.footer_text
                raw_entities = json.loads(str(settings.footer_text_entities))

                if "entities" in raw_entities:

                    for entity in raw_entities["entities"]:
                        entity_values_list = list(entity.values())

                        if entity["type"] == "text_link":
                            entity = MessageEntity(type=entity_values_list[0],
                                                   offset=entity_values_list[1],
                                                   length=entity_values_list[2], url=entity_values_list[3])
                        elif entity["type"] in ["mention", "url", "hashtag", "cashtag", "bot_command",
                                                "email", "phone_number", "bold", "italic", "underline",
                                                "strikethrough", "code", "pre"]:
                            entity = MessageEntity(type=entity_values_list[0],
                                                   offset=entity_values_list[1],
                                                   length=entity_values_list[2])
                        footer_entities.append(entity)

                await bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç footer —Ç–∞–∫–æ–π:")
                await bot.send_message(message.chat.id, footer_text, entities=footer_entities, reply_markup=user_markup)
                await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π footer:")

                set_state(message.chat.id, 62)
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif isinstance(message.text, str) and '–ü–æ—Ä–æ–≥ –æ–ø—ã—Ç–∞ –∞–≤—Ç–æ—Ä–∞–º:' in message.text:
            if isinstance(current_user, Admin) and current_user.permissions == 'admin_permissions':
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)

                user_markup.row(main_menu)

                await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤"
                                                        " (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)", reply_markup=user_markup)
                set_state(message.chat.id, 63)
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif message.text == '–°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î':
            if isinstance(current_user, Admin) and current_user.permissions == 'admin_permissions':
                await bot.delete_message(message.chat.id, message.message_id)
                try:
                    with open(files.reserve_db, 'rb') as database:
                        await bot.send_document(message.chat.id, database)
                except Exception as e:
                    logging.warning(e)
                    await bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î')
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif message.text == '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î':
            if isinstance(current_user, Admin) and current_user.permissions == 'admin_permissions':
                await bot.delete_message(message.chat.id, message.message_id)
                try:
                    with open(files.main_db, 'rb') as db:
                        db_bytes = db.read()
                        with open(files.reserve_db, 'wb') as rdb:
                            rdb.write(db_bytes)
                except Exception as e:
                    logging.error(e)
                    await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                else:
                    await bot.send_message(message.chat.id, "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            else:
                await bot.send_message(message.chat.id,
                                       "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

        elif get_state(message.chat.id) == 1:
            set_chat_value_message(message, 1)

            instance = Post.get_or_none(Post.post_name == message.text)
            if instance is None:
                creation_post = get_chat_value_message(message)

                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row(main_menu)
                await bot.send_message(message.chat.id, f"–¢–µ–º–∞ –ø–æ—Å—Ç–∞: {str(creation_post['post_name'])}",
                                       reply_markup=user_markup)

                key = InlineKeyboardMarkup()
                key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                             callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                await bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {creation_post['post_name']}",
                                       reply_markup=key)
                set_state(message.chat.id, 2)
            else:
                await bot.send_message(message.chat.id, '–ü–æ—Å—Ç —Å –ø–æ—Ö–æ–∂–µ–π —Ç–µ–º–æ–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. '
                                                        '–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É –ø–æ—Å—Ç–∞')

        elif get_state(message.chat.id) == 2:
            set_chat_value_message(message, 2)

            key = InlineKeyboardMarkup()
            key.row(InlineKeyboardButton(text='–î–ê', callback_data='–ï—Å—Ç—å –¥–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è'),
                    InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ù–µ—Ç –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è'))
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(message.chat.id, '–ï—Å—Ç—å –ª–∏ –¥–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω?',
                                   reply_markup=key)
            delete_state(message.chat.id)

        elif get_state(message.chat.id) == 3:
            set_chat_value_message(message, 3)

            key = InlineKeyboardMarkup()
            key.row(InlineKeyboardButton(text='–î–ê', callback_data='–ï—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'),
                    InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'))
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —É—á–∞—Å—Ç–∏—è?', reply_markup=key)
            delete_state(message.chat.id)

        elif get_state(message.chat.id) in [4, 5, 6]:
            key = InlineKeyboardMarkup()
            if get_state(message.chat.id) == 4:
                set_chat_value_message(message, 4)

                key.row(InlineKeyboardButton(text='–î–ê', callback_data='–ï—Å—Ç—å —Å–∞–π—Ç'),
                        InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ù–µ—Ç —Å–∞–π—Ç–∞'))
                key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                             callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                await bot.send_message(message.chat.id, '–ï—Å—Ç—å –ª–∏ —Å–∞–π—Ç —É –ø—Ä–æ–µ–∫—Ç–∞?', reply_markup=key)

                delete_state(message.chat.id)
            elif get_state(message.chat.id) == 5:
                if validators.url(message.text):
                    set_chat_value_message(message, 5)

                    key.row(InlineKeyboardButton(text='–î–ê', callback_data='–ï—Å—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä'),
                            InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ù–µ—Ç —Ç–≤–∏—Ç—Ç–µ—Ä–∞'))
                    key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                 callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                    await bot.send_message(message.chat.id, '–ï—Å—Ç—å –ª–∏ —Ç–≤–∏—Ç—Ç–µ—Ä —É –ø—Ä–æ–µ–∫—Ç–∞?', reply_markup=key)
                    delete_state(message.chat.id)
                else:
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ http://example.com')
            elif get_state(message.chat.id) == 6:
                if validators.url(message.text):
                    set_chat_value_message(message, 6)

                    key.row(InlineKeyboardButton(text='–î–ê', callback_data='–ï—Å—Ç—å –¥–∏—Å–∫–æ—Ä–¥'),
                            InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ù–µ—Ç –¥–∏—Å–∫–æ—Ä–¥–∞'))
                    key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                 callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                    await bot.send_message(message.chat.id, '–ï—Å—Ç—å –ª–∏ –¥–∏—Å–∫–æ—Ä–¥ —É –ø—Ä–æ–µ–∫—Ç–∞?', reply_markup=key)
                    delete_state(message.chat.id)
                else:
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ http://example.com')

        elif get_state(message.chat.id) == 7:
            if validators.url(message.text):
                set_chat_value_message(message, 7)

                key = InlineKeyboardMarkup()
                key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                             callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                await bot.send_message(message.chat.id, '–í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!!! '
                                                        '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ—Å—å, –±—É–¥–µ—Ç –ª–∏ –≤ –Ω—ë–º –∫–∞—Ä—Ç–∏–Ω–∫–∞.'
                                                        '–ï—Å–ª–∏ –≤—ã –Ω–µ –¥–æ–±–∞–≤–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—Ä–∞–∑—É, '
                                                        '—Ç–æ –ø–æ—Ç–æ–º –≤—ã –µ—ë –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–∂–µ –¥–æ–±–∞–≤–∏—Ç—å, '
                                                        '–∏ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É–∂–µ –±—ã–ª–∞,'
                                                        '—Ç–æ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –µ—ë —É–±—Ä–∞—Ç—å!')
                await bot.send_message(message.chat.id, '–í—Å—Ç–∞–≤—å—Ç–µ –±–∞–Ω–Ω–µ—Ä (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –ø–æ—Å—Ç–∞. '
                                                        '–ò–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –±–∞–Ω–Ω–µ—Ä–∞, —Ç–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /empty', reply_markup=key)

                set_state(message.chat.id, 8)
            else:
                await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ http://example.com')

        elif get_state(message.chat.id) == 8:
            if message.text == '/empty':
                set_chat_value_message(message, 8)
            elif message.document:
                file_info = await bot.get_file(message.document.file_id)
                downloaded_file = await bot.download_file(file_info.file_path)

                creation_post = get_chat_value_message(message)

                src = f"data/media/posts_media/pic for post - {creation_post['post_name']}.jpeg"
                with open(src, 'wb') as new_file:
                    new_file.write(downloaded_file.getvalue())
                set_chat_value_message(message, 8, pic_src=src)

                await bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.')
            elif message.photo:
                file_info = await bot.get_file(message.photo[-1].file_id)
                downloaded_file = await bot.download_file(file_info.file_path)

                creation_post = get_chat_value_message(message)

                src = f"data/media/posts_media/pic for post - {creation_post['post_name']}.jpeg"
                with open(src, 'wb') as new_file:
                    new_file.write(downloaded_file.getvalue())
                set_chat_value_message(message, 8, pic_src=src)

                await bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.')

            key = InlineKeyboardMarkup()
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –ø–æ—Å—Ç–∞', reply_markup=key)

            set_state(message.chat.id, 9)

        elif get_state(message.chat.id) == 9:
            if '#' in message.text:
                set_chat_value_message(message, 9)

                creation_post = get_chat_value_message(message)

                author = User.get_or_none(user_id=creation_post['author_id'])

                try:
                    new_post = Post(
                        author=author,
                        post_name=str(creation_post['post_name']),
                        post_date=str(creation_post['post_date']),
                        post_desc=str(creation_post['post_desc']),
                        what_needs=str(creation_post['what_needs']),
                        site=str(creation_post['site']),
                        twitter=str(creation_post['twitter']),
                        discord=str(creation_post['discord']),
                        hashtags=str(creation_post['hashtags']),
                        pic_post=str(creation_post['pic_post']),
                        name_entities=str(creation_post['name_entities']),
                        desc_entities=str(creation_post['desc_entities']),
                        date_entities=str(creation_post['date_entities']),
                        what_needs_entities=str(creation_post['what_needs_entities']),
                    )
                    new_post.save()
                except Exception as e:
                    logging.warning(e)
                else:
                    await log(f"Post {str(creation_post['post_name'])} is created by {message.chat.id}")

                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')

                    if await preview(bot, message, creation_post, settings):
                        key = InlineKeyboardMarkup()
                        key.row(InlineKeyboardButton(text='–î–ê', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
                                InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç'))
                        key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                     callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=key)
                    else:
                        user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                        user_markup.row(main_menu)
                        await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                               reply_markup=user_markup)
                        set_state(message.chat.id, 130)

            else:
                await bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞!'
                                                        '–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –ø–æ—Å—Ç–∞.')

        elif get_state(message.chat.id) == 10:
            if message.text.lower() == '–¥–∞':
                creation_post = get_chat_value_message(message)
                entity_list = []
                text = f"{creation_post['post_name']}\n\n" \
                       f"{creation_post['post_desc']}\n\n"

                if creation_post['what_needs'] != '':
                    text += f"‚úÖ {creation_post['what_needs']}\n\n"

                if creation_post['post_date'] != '':
                    text += f"üìÜ {creation_post['post_date']}\n\n"

                if creation_post['site'] != '' or creation_post['twitter'] != '' or creation_post['discord'] != '':
                    text += "üîó "
                    if creation_post['site'] != '':
                        text += "–°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞ "
                    if creation_post['twitter'] != '':
                        if creation_post['site'] == '':
                            text += "Twitter "
                        else:
                            text += "| Twitter "
                    if creation_post['discord'] != '':
                        if creation_post['site'] == '' and creation_post['twitter'] == '':
                            text += "Discord"
                        else:
                            text += "| Discord"
                    text += "\n\n"

                text += f"{creation_post['hashtags']}\n\n" \
                        f"–ê–≤—Ç–æ—Ä: @{creation_post['author_name']}\n" \
                        f"{settings.footer_text}"

                name_entities = json.loads(str(creation_post['name_entities']))
                description_entities = json.loads(str(creation_post['desc_entities']))
                date_entities = json.loads(str(creation_post['date_entities']))
                what_needs_entities = json.loads(str(creation_post['what_needs_entities']))
                footer_text_entities = json.loads(str(settings.footer_text_entities))

                count_string_track = 0

                entity = MessageEntity(type="bold",
                                       offset=count_string_track,
                                       length=len(str(creation_post['post_name'])) +
                                              emoji_count(str(creation_post['post_name'])))
                entity_list.append(entity)

                if "entities" in name_entities:
                    entity_list = entity_read(name_entities, entity_list, count_string_track)

                count_string_track += len(str(creation_post['post_name'])) + len("\n\n") + \
                                      emoji_count(str(creation_post['post_name']))

                if "entities" in description_entities:
                    entity_list = entity_read(description_entities, entity_list, count_string_track)

                count_string_track += len(str(creation_post['post_desc'])) + len("\n\n") + \
                                      emoji_count(str(creation_post['post_desc']))

                if creation_post['what_needs'] != '':
                    count_string_track += len(str('‚úÖ '))

                    if "entities" in what_needs_entities:
                        entity_list = entity_read(what_needs_entities, entity_list, count_string_track)

                    count_string_track += len(str(creation_post['what_needs'])) + len("\n\n") + \
                                          emoji_count(str(creation_post['what_needs']))

                if creation_post['post_date'] != '':
                    count_string_track += len(str('üìÜ ')) + 1

                    if "entities" in date_entities:
                        entity_list = entity_read(date_entities, entity_list, count_string_track)

                    count_string_track += len(str(creation_post['post_date'])) + len("\n\n") + \
                                          emoji_count(str(creation_post['post_date']))

                if creation_post['site'] != '' or creation_post['twitter'] != '' or creation_post['discord'] != '':
                    count_string_track += len(str("üîó ")) + 1
                    if creation_post['site'] != '':
                        entity = MessageEntity(type="text_link",
                                               offset=count_string_track,
                                               length=len("–°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞"),
                                               url=f"{creation_post['site']}")
                        entity_list.append(entity)
                        count_string_track += len("–°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞ ")
                    if creation_post['twitter'] != '':
                        if creation_post['site'] == '':
                            entity = MessageEntity(type="text_link",
                                                   offset=count_string_track,
                                                   length=len("Twitter"),
                                                   url=f"{creation_post['twitter']}")
                            entity_list.append(entity)
                            count_string_track += len("Twitter ")
                        else:
                            entity = MessageEntity(type="text_link",
                                                   offset=count_string_track + len("| "),
                                                   length=len("Twitter"),
                                                   url=f"{creation_post['twitter']}")
                            entity_list.append(entity)
                            count_string_track += len("| Twitter ")
                    if creation_post['discord'] != '':
                        if creation_post['site'] == '' and creation_post['twitter'] == '':
                            entity = MessageEntity(type="text_link",
                                                   offset=count_string_track,
                                                   length=len("Discord"),
                                                   url=f"{creation_post['discord']}")
                            entity_list.append(entity)
                            count_string_track += len("Discord")
                        else:
                            entity = MessageEntity(type="text_link",
                                                   offset=count_string_track + len("| "),
                                                   length=len("Discord"),
                                                   url=f"{creation_post['discord']}")
                            entity_list.append(entity)
                            count_string_track += len("| Discord")
                    count_string_track += len("\n\n")

                count_string_track += len(str(creation_post['hashtags'])) + len("\n\n")

                entity = MessageEntity(type="italic",
                                       offset=count_string_track,
                                       length=len('–ê–≤—Ç–æ—Ä'))
                entity_list.append(entity)

                count_string_track += len(f"–ê–≤—Ç–æ—Ä: @{creation_post['author_name']}\n")

                if "entities" in footer_text_entities:
                    entity_list = entity_read(footer_text_entities, entity_list, count_string_track)

                count_string_track += len(f"{settings.footer_text}")

                if type(creation_post['pic_post']) is tuple:
                    if creation_post['pic_post'][0] == '':
                        try:
                            message_result = await bot.send_message(settings.channel_name, text, entities=entity_list)
                        except Exception as e:
                            logging.warning(e)
                        else:
                            await log(f"Post {str(creation_post['post_name'])} is posted by {message.chat.id}")

                            post = Post.get(Post.post_name == str(creation_post['post_name']))
                            post.message_id = message_result.message_id
                            post.status = 1
                            post.save()

                            try:
                                await bot.forward_message(chat_id=settings.group_forward_id,
                                                          from_chat_id=settings.channel_name,
                                                          message_id=message_result.message_id)
                            except Exception as e:
                                logging.warning(e)
                    else:
                        photo = open(creation_post['pic_post'][0], 'rb')
                        try:
                            message_result = await bot.send_photo(settings.channel_name,
                                                                  photo, caption=text, caption_entities=entity_list)
                        except Exception as e:
                            logging.warning(e)
                        else:
                            await log(f"Post {str(creation_post['post_name'])} is posted by {message.chat.id}")

                            post = Post.get(Post.post_name == str(creation_post['post_name']))
                            post.message_id = message_result.message_id
                            post.status = 1
                            post.save()

                            try:
                                await bot.forward_message(chat_id=settings.group_forward_id,
                                                          from_chat_id=settings.channel_name,
                                                          message_id=message_result.message_id)
                            except Exception as e:
                                logging.warning(e)
                else:
                    if creation_post['pic_post'] == '':
                        try:
                            message_result = await bot.send_message(settings.channel_name, text, entities=entity_list)
                        except Exception as e:
                            logging.warning(e)
                        else:
                            await log(f"Post {str(creation_post['post_name'])} is posted by {message.chat.id}")

                            post = Post.get(Post.post_name == str(creation_post['post_name']))
                            post.message_id = message_result.message_id
                            post.status = 1
                            post.save()

                            try:
                                await bot.forward_message(chat_id=settings.group_forward_id,
                                                          from_chat_id=settings.channel_name,
                                                          message_id=message_result.message_id)
                            except Exception as e:
                                logging.warning(e)
                    else:
                        photo = open(creation_post['pic_post'], 'rb')
                        try:
                            message_result = await bot.send_photo(settings.channel_name,
                                                                  photo, caption=text, caption_entities=entity_list)
                        except Exception as e:
                            logging.warning(e)
                        else:
                            await log(f"Post {str(creation_post['post_name'])} is posted by {message.chat.id}")

                            post = Post.get(Post.post_name == str(creation_post['post_name']))
                            post.message_id = message_result.message_id
                            post.status = 1
                            post.save()

                            try:
                                await bot.forward_message(chat_id=settings.group_forward_id,
                                                          from_chat_id=settings.channel_name,
                                                          message_id=message_result.message_id)
                            except Exception as e:
                                logging.warning(e)

                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row('–ü–æ—Å—Ç—ã')
                user_markup.row('–°–ø–∏—Å–∫–∏')
                if isinstance(current_user, Admin) and current_user.permissions == 'admin_permissions':
                    user_markup.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞')

                await bot.send_message(message.chat.id, '–ü–æ—Å—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª–µ.',
                                       reply_markup=user_markup)

                delete_chat_value_message(message)
                delete_state(message.chat.id)
            else:
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row('–ü–æ—Å—Ç—ã')
                user_markup.row('–°–ø–∏—Å–∫–∏')
                if isinstance(current_user, Admin) and current_user.permissions == 'admin_permissions':
                    user_markup.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞')

                await bot.send_message(message.chat.id, "–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ '–î–∞', –ø–æ—ç—Ç–æ–º—É –ü–æ—Å—Ç –Ω–µ –±—ã–ª —Ä–∞–∑–º–µ—â—ë–Ω.",
                                       reply_markup=user_markup)

                delete_chat_value_message(message)
                delete_state(message.chat.id)

        elif get_state(message.chat.id) == 90:
            post_for_pos = Post.get_or_none(Post.post_name == message.text)

            if post_for_pos is None:
                await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')
            else:
                with shelve.open(files.bot_message_bd) as bd:
                    bd[str(message.chat.id)] = {
                        'author_name': str(post_for_pos.author.username),
                        'post_name': str(post_for_pos.post_name),
                        'post_desc': str(post_for_pos.post_desc),
                        'post_date': str(post_for_pos.post_date),
                        'what_needs': str(post_for_pos.what_needs),
                        'site': str(post_for_pos.site),
                        'twitter': str(post_for_pos.twitter),
                        'discord': str(post_for_pos.discord),
                        'hashtags': str(post_for_pos.hashtags),
                        'pic_post': str(post_for_pos.pic_post),
                        'name_entities': str(post_for_pos.name_entities),
                        'desc_entities': str(post_for_pos.desc_entities),
                        'date_entities': str(post_for_pos.date_entities),
                        'what_needs_entities': str(post_for_pos.what_needs_entities),
                        'status': post_for_pos.status
                    }

                unposted_post = get_chat_value_message(message)

                if not await preview(bot, message, unposted_post, settings):
                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–ù–µ —É–¥–∞—ë—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä. '
                                                            '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                           reply_markup=user_markup)
                    set_state(message.chat.id, 130)
                else:
                    post_key = InlineKeyboardMarkup()
                    post_key.add(InlineKeyboardButton(text="–î–ê", callback_data='–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç'),
                                 InlineKeyboardButton(text="–ù–ï–¢", callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'))

                    await bot.send_message(message.chat.id, '–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç?',
                                           reply_markup=post_key)

        elif get_state(message.chat.id) == 11:
            post_for_del = Post.get_or_none(Post.post_name == message.text)

            if post_for_del is not None:
                try:
                    await bot.delete_message(settings.channel_name, post_for_del.message_id)
                except:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞: '
                                                            '–æ–Ω –Ω–µ –±—ã–ª —Ç–∞–º —Ä–∞–∑–º–µ—â—ë–Ω!')
                else:
                    post_for_del.delete_instance()

                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç', '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç')
                    user_markup.row('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤', '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', reply_markup=user_markup)
                    await log(f'Post {message.text} is deleted by {message.chat.id}')
                    delete_state(message.chat.id)
            else:
                await bot.send_message(message.chat.id,
                                       '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! '
                                       '–í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É')

        elif get_state(message.chat.id) == 12:
            post_for_edit = Post.get_or_none(post_name=message.text)
            if post_for_edit is not None:
                with shelve.open(files.bot_message_bd) as bd:
                    bd[str(message.chat.id)] = {
                        'author_name': str(post_for_edit.author.username),
                        'post_name': str(post_for_edit.post_name),
                        'post_desc': str(post_for_edit.post_desc),
                        'post_date': str(post_for_edit.post_date),
                        'what_needs': str(post_for_edit.what_needs),
                        'site': str(post_for_edit.site),
                        'twitter': str(post_for_edit.twitter),
                        'discord': str(post_for_edit.discord),
                        'hashtags': str(post_for_edit.hashtags),
                        'pic_post': str(post_for_edit.pic_post),
                        'name_entities': str(post_for_edit.name_entities),
                        'desc_entities': str(post_for_edit.desc_entities),
                        'date_entities': str(post_for_edit.date_entities),
                        'what_needs_entities': str(post_for_edit.what_needs_entities),
                        'status': post_for_edit.status
                    }

                edition_post = get_chat_value_message(message)
                await preview(bot, message, edition_post, settings)

                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                user_markup.row(main_menu)
                await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                       reply_markup=user_markup)
                set_state(message.chat.id, 13)
            else:
                await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif get_state(message.chat.id) in [14, 140]:
            edition_post = get_chat_value_message(message)

            post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))
            if post_for_edit is not None:
                post_for_edit.post_name = message.text
                post_for_edit.name_entities = str(message)
                post_for_edit.save()

                if get_state(message.chat.id) == 14:
                    edited_post = Post.get_or_none(post_name=message.text)

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if edition_post['status']:
                        await edit_post(bot, message, edition_post, settings, False)

                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–¢–µ–º–∞ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=user_markup)
                    await log(f"Name post {edition_post['post_name']} is changed by {message.chat.id}")
                    set_state(message.chat.id, 13)

                elif get_state(message.chat.id) == 140:
                    edited_post = Post.get_or_none(post_name=message.text)

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if await preview(bot, message, edition_post, settings):
                        key = InlineKeyboardMarkup()
                        key.row(InlineKeyboardButton(text='–î–ê', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
                                InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç'))
                        key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                     callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=key)
                    else:
                        user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                        user_markup.row(main_menu)
                        await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                               reply_markup=user_markup)
                        set_state(message.chat.id, 130)
            else:
                await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif get_state(message.chat.id) in [15, 150]:
            edition_post = get_chat_value_message(message)

            post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))
            if post_for_edit is not None:
                post_for_edit.post_desc = message.text
                post_for_edit.desc_entities = str(message)
                post_for_edit.save()

                if get_state(message.chat.id) == 15:
                    edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if edition_post['status']:
                        await edit_post(bot, message, edition_post, settings, False)

                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!',
                                           reply_markup=user_markup)
                    await log(f"Description post {edition_post['post_name']} is changed by {message.chat.id}")
                    set_state(message.chat.id, 13)
                elif get_state(message.chat.id) == 150:
                    edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if await preview(bot, message, edition_post, settings):
                        key = InlineKeyboardMarkup()
                        key.row(InlineKeyboardButton(text='–î–ê', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
                                InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç'))
                        key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                     callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=key)
                    else:
                        user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                        user_markup.row(main_menu)
                        await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                               reply_markup=user_markup)
                        set_state(message.chat.id, 130)

            else:
                await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif get_state(message.chat.id) in [16, 160]:
            edition_post = get_chat_value_message(message)

            if message.text == '/empty':
                post_date = ''
                date_entities = {}
            else:
                post_date = message.text
                date_entities = message

            post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))
            if post_for_edit is not None:
                post_for_edit.post_date = post_date
                post_for_edit.date_entities = date_entities
                post_for_edit.save()

                if get_state(message.chat.id) == 16:
                    edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if edition_post['status']:
                        await edit_post(bot, message, edition_post, settings, False)

                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!',
                                           reply_markup=user_markup)
                    await log(f"Date post {edition_post['post_name']} is changed by {message.chat.id}")
                    set_state(message.chat.id, 13)
                elif get_state(message.chat.id) == 160:
                    edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if await preview(bot, message, edition_post, settings):
                        key = InlineKeyboardMarkup()
                        key.row(InlineKeyboardButton(text='–î–ê', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
                                InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç'))
                        key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                     callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=key)
                    else:
                        user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                        user_markup.row(main_menu)
                        await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                               reply_markup=user_markup)
                        set_state(message.chat.id, 130)
            else:
                await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif get_state(message.chat.id) in [17, 170]:
            edition_post = get_chat_value_message(message)

            if message.text == '/empty':
                what_needs = ''
                what_needs_entities = {}
            else:
                what_needs = message.text
                what_needs_entities = message

            post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))
            if post_for_edit is not None:
                post_for_edit.what_needs = what_needs
                post_for_edit.what_needs_entities = what_needs_entities
                post_for_edit.save()

                if get_state(message.chat.id) == 17:
                    edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if edition_post['status']:
                        await edit_post(bot, message, edition_post, settings, False)

                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!',
                                           reply_markup=user_markup)
                    await log(f"Requirements {edition_post['post_name']} is changed by {message.chat.id}")
                    set_state(message.chat.id, 13)
                elif get_state(message.chat.id) == 170:
                    edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if await preview(bot, message, edition_post, settings):
                        key = InlineKeyboardMarkup()
                        key.row(InlineKeyboardButton(text='–î–ê', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
                                InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç'))
                        key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                     callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=key)
                    else:
                        user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                        user_markup.row(main_menu)
                        await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                               reply_markup=user_markup)
                        set_state(message.chat.id, 130)
            else:
                await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif get_state(message.chat.id) in [18, 180]:
            edition_post = get_chat_value_message(message)

            site = ''

            if message.text == '/empty':
                flag_site = 1
            else:
                if validators.url(message.text):
                    site = message.text
                    flag_site = 1
                else:
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ http://example.com')
                    flag_site = 0

            if flag_site:
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    post_for_edit.site = site
                    post_for_edit.save()

                    if get_state(message.chat.id) == 18:
                        edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                        with shelve.open(files.bot_message_bd) as bd:
                            bd[str(message.chat.id)] = {
                                'author_name': str(edited_post.author.username),
                                'post_name': str(edited_post.post_name),
                                'post_desc': str(edited_post.post_desc),
                                'post_date': str(edited_post.post_date),
                                'what_needs': str(edited_post.what_needs),
                                'site': str(edited_post.site),
                                'twitter': str(edited_post.twitter),
                                'discord': str(edited_post.discord),
                                'hashtags': str(edited_post.hashtags),
                                'pic_post': str(edited_post.pic_post),
                                'name_entities': str(edited_post.name_entities),
                                'desc_entities': str(edited_post.desc_entities),
                                'date_entities': str(edited_post.date_entities),
                                'what_needs_entities': str(edited_post.what_needs_entities),
                                'status': edited_post.status,
                                'message_id': edited_post.message_id
                            }

                        edition_post = get_chat_value_message(message)

                        if edition_post['status']:
                            await edit_post(bot, message, edition_post, settings, False)

                        user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                        user_markup.row(main_menu)
                        await bot.send_message(message.chat.id, '–°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!',
                                               reply_markup=user_markup)
                        await log(f"Requirements {edition_post['post_name']} is changed by {message.chat.id}")
                        set_state(message.chat.id, 13)
                    elif get_state(message.chat.id) == 180:
                        edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                        with shelve.open(files.bot_message_bd) as bd:
                            bd[str(message.chat.id)] = {
                                'author_name': str(edited_post.author.username),
                                'post_name': str(edited_post.post_name),
                                'post_desc': str(edited_post.post_desc),
                                'post_date': str(edited_post.post_date),
                                'what_needs': str(edited_post.what_needs),
                                'site': str(edited_post.site),
                                'twitter': str(edited_post.twitter),
                                'discord': str(edited_post.discord),
                                'hashtags': str(edited_post.hashtags),
                                'pic_post': str(edited_post.pic_post),
                                'name_entities': str(edited_post.name_entities),
                                'desc_entities': str(edited_post.desc_entities),
                                'date_entities': str(edited_post.date_entities),
                                'what_needs_entities': str(edited_post.what_needs_entities),
                                'status': edited_post.status,
                                'message_id': edited_post.message_id
                            }

                        edition_post = get_chat_value_message(message)

                        if await preview(bot, message, edition_post, settings):
                            key = InlineKeyboardMarkup()
                            key.row(InlineKeyboardButton(text='–î–ê', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
                                    InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç'))
                            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                            await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=key)
                        else:
                            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                            user_markup.row(main_menu)
                            await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                                   reply_markup=user_markup)
                            set_state(message.chat.id, 130)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif get_state(message.chat.id) in [19, 190]:
            edition_post = get_chat_value_message(message)

            twitter = ''

            if message.text == '/empty':
                flag_site = 1
            else:
                if validators.url(message.text):
                    twitter = message.text
                    flag_site = 1
                else:
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ http://example.com')
                    flag_site = 0

            if flag_site:
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    post_for_edit.twitter = twitter
                    post_for_edit.save()

                    if get_state(message.chat.id) == 19:
                        edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                        with shelve.open(files.bot_message_bd) as bd:
                            bd[str(message.chat.id)] = {
                                'author_name': str(edited_post.author.username),
                                'post_name': str(edited_post.post_name),
                                'post_desc': str(edited_post.post_desc),
                                'post_date': str(edited_post.post_date),
                                'what_needs': str(edited_post.what_needs),
                                'site': str(edited_post.site),
                                'twitter': str(edited_post.twitter),
                                'discord': str(edited_post.discord),
                                'hashtags': str(edited_post.hashtags),
                                'pic_post': str(edited_post.pic_post),
                                'name_entities': str(edited_post.name_entities),
                                'desc_entities': str(edited_post.desc_entities),
                                'date_entities': str(edited_post.date_entities),
                                'what_needs_entities': str(edited_post.what_needs_entities),
                                'status': edited_post.status,
                                'message_id': edited_post.message_id
                            }

                        edition_post = get_chat_value_message(message)

                        if edition_post['status']:
                            await edit_post(bot, message, edition_post, settings, False)

                        user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                        user_markup.row(main_menu)
                        await bot.send_message(message.chat.id, '–¢–≤–∏—Ç—Ç–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!',
                                               reply_markup=user_markup)
                        await log(f"Requirements {edition_post['post_name']} is changed by {message.chat.id}")
                        set_state(message.chat.id, 13)
                    elif get_state(message.chat.id) == 190:
                        edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                        with shelve.open(files.bot_message_bd) as bd:
                            bd[str(message.chat.id)] = {
                                'author_name': str(edited_post.author.username),
                                'post_name': str(edited_post.post_name),
                                'post_desc': str(edited_post.post_desc),
                                'post_date': str(edited_post.post_date),
                                'what_needs': str(edited_post.what_needs),
                                'site': str(edited_post.site),
                                'twitter': str(edited_post.twitter),
                                'discord': str(edited_post.discord),
                                'hashtags': str(edited_post.hashtags),
                                'pic_post': str(edited_post.pic_post),
                                'name_entities': str(edited_post.name_entities),
                                'desc_entities': str(edited_post.desc_entities),
                                'date_entities': str(edited_post.date_entities),
                                'what_needs_entities': str(edited_post.what_needs_entities),
                                'status': edited_post.status,
                                'message_id': edited_post.message_id
                            }

                        edition_post = get_chat_value_message(message)

                        if await preview(bot, message, edition_post, settings):
                            key = InlineKeyboardMarkup()
                            key.row(InlineKeyboardButton(text='–î–ê', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
                                    InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç'))
                            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                            await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=key)
                        else:
                            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                            user_markup.row(main_menu)
                            await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                                   reply_markup=user_markup)
                            set_state(message.chat.id, 130)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif get_state(message.chat.id) in [20, 200]:
            edition_post = get_chat_value_message(message)

            discord = ''

            if message.text == '/empty':
                flag_site = 1
            else:
                if validators.url(message.text):
                    discord = message.text
                    flag_site = 1
                else:
                    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ http://example.com')
                    flag_site = 0

            if flag_site:
                post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

                if post_for_edit is not None:
                    post_for_edit.discord = discord
                    post_for_edit.save()

                    if get_state(message.chat.id) == 20:
                        edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                        with shelve.open(files.bot_message_bd) as bd:
                            bd[str(message.chat.id)] = {
                                'author_name': str(edited_post.author.username),
                                'post_name': str(edited_post.post_name),
                                'post_desc': str(edited_post.post_desc),
                                'post_date': str(edited_post.post_date),
                                'what_needs': str(edited_post.what_needs),
                                'site': str(edited_post.site),
                                'twitter': str(edited_post.twitter),
                                'discord': str(edited_post.discord),
                                'hashtags': str(edited_post.hashtags),
                                'pic_post': str(edited_post.pic_post),
                                'name_entities': str(edited_post.name_entities),
                                'desc_entities': str(edited_post.desc_entities),
                                'date_entities': str(edited_post.date_entities),
                                'what_needs_entities': str(edited_post.what_needs_entities),
                                'status': edited_post.status,
                                'message_id': edited_post.message_id
                            }

                        edition_post = get_chat_value_message(message)

                        if edition_post['status']:
                            await edit_post(bot, message, edition_post, settings, False)

                        user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                        user_markup.row(main_menu)
                        await bot.send_message(message.chat.id, '–î–∏—Å–∫–æ—Ä–¥ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!',
                                               reply_markup=user_markup)
                        await log(f"Requirements {edition_post['post_name']} is changed by {message.chat.id}")
                        set_state(message.chat.id, 13)
                    elif get_state(message.chat.id) == 200:
                        edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                        with shelve.open(files.bot_message_bd) as bd:
                            bd[str(message.chat.id)] = {
                                'author_name': str(edited_post.author.username),
                                'post_name': str(edited_post.post_name),
                                'post_desc': str(edited_post.post_desc),
                                'post_date': str(edited_post.post_date),
                                'what_needs': str(edited_post.what_needs),
                                'site': str(edited_post.site),
                                'twitter': str(edited_post.twitter),
                                'discord': str(edited_post.discord),
                                'hashtags': str(edited_post.hashtags),
                                'pic_post': str(edited_post.pic_post),
                                'name_entities': str(edited_post.name_entities),
                                'desc_entities': str(edited_post.desc_entities),
                                'date_entities': str(edited_post.date_entities),
                                'what_needs_entities': str(edited_post.what_needs_entities),
                                'status': edited_post.status,
                                'message_id': edited_post.message_id
                            }

                        edition_post = get_chat_value_message(message)

                        if await preview(bot, message, edition_post, settings):
                            key = InlineKeyboardMarkup()
                            key.row(InlineKeyboardButton(text='–î–ê', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
                                    InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç'))
                            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                            await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=key)
                        else:
                            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                            user_markup.row(main_menu)
                            await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                                   reply_markup=user_markup)
                            set_state(message.chat.id, 130)
                else:
                    await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif get_state(message.chat.id) in [21, 210]:
            '''download photo'''
            edition_post = get_chat_value_message(message)

            src = ''
            if message.text == '/empty':
                edition_post['pic_post'] = src
            elif message.document:
                file_info = await bot.get_file(message.document.file_id)
                downloaded_file = await bot.download_file(file_info.file_path)

                src = f"data/media/posts_media/pic for post - {edition_post['post_name']}.jpeg"
                with open(src, 'wb') as new_file:
                    new_file.write(downloaded_file.getvalue())

                edition_post['pic_post'] = src
                await bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.')
            elif message.photo:
                file_info = await bot.get_file(message.photo[-1].file_id)
                downloaded_file = await bot.download_file(file_info.file_path)

                src = f"data/media/posts_media/pic for post - {edition_post['post_name']}.jpeg"
                with open(src, 'wb') as new_file:
                    new_file.write(downloaded_file.getvalue())

                edition_post['pic_post'] = src
                await bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.')

            post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

            if post_for_edit is not None:
                post_for_edit.pic_post = src
                post_for_edit.save()

                if get_state(message.chat.id) == 21:
                    edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if edition_post['status']:
                        await edit_post(bot, message, edition_post, settings, True)

                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–ë–∞–Ω–Ω–µ—Ä –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=user_markup)
                    await log(f"Picture {edition_post['post_name']} is changed by {message.chat.id}")
                    set_state(message.chat.id, 13)
                elif get_state(message.chat.id) == 210:
                    edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if await preview(bot, message, edition_post, settings):
                        key = InlineKeyboardMarkup()
                        key.row(InlineKeyboardButton(text='–î–ê', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
                                InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç'))
                        key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                     callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=key)
                    else:
                        user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                        user_markup.row(main_menu)
                        await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                               reply_markup=user_markup)
                        set_state(message.chat.id, 130)
            else:
                await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif get_state(message.chat.id) in [22, 220]:
            edition_post = get_chat_value_message(message)

            post_for_edit = Post.get_or_none(post_name=str(edition_post['post_name']))

            if post_for_edit is not None:
                post_for_edit.hashtags = message.text
                post_for_edit.save()

                if get_state(message.chat.id) == 22:
                    edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if edition_post['status']:
                        await edit_post(bot, message, edition_post, settings, False)

                    user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                    user_markup.row(main_menu)
                    await bot.send_message(message.chat.id, '–•—ç—à—Ç–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!', reply_markup=user_markup)
                    await log(f"Hashtags {edition_post['post_name']} is changed by {message.chat.id}")
                    set_state(message.chat.id, 13)
                elif get_state(message.chat.id) == 220:
                    edited_post = Post.get_or_none(post_name=str(edition_post['post_name']))

                    with shelve.open(files.bot_message_bd) as bd:
                        bd[str(message.chat.id)] = {
                            'author_name': str(edited_post.author.username),
                            'post_name': str(edited_post.post_name),
                            'post_desc': str(edited_post.post_desc),
                            'post_date': str(edited_post.post_date),
                            'what_needs': str(edited_post.what_needs),
                            'site': str(edited_post.site),
                            'twitter': str(edited_post.twitter),
                            'discord': str(edited_post.discord),
                            'hashtags': str(edited_post.hashtags),
                            'pic_post': str(edited_post.pic_post),
                            'name_entities': str(edited_post.name_entities),
                            'desc_entities': str(edited_post.desc_entities),
                            'date_entities': str(edited_post.date_entities),
                            'what_needs_entities': str(edited_post.what_needs_entities),
                            'status': edited_post.status,
                            'message_id': edited_post.message_id
                        }

                    edition_post = get_chat_value_message(message)

                    if await preview(bot, message, edition_post, settings):
                        key = InlineKeyboardMarkup()
                        key.row(InlineKeyboardButton(text='–î–ê', callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
                                InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç'))
                        key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                     callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                        await bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç?', reply_markup=key)
                    else:
                        user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
                        user_markup.row(main_menu)
                        await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                               reply_markup=user_markup)
                        set_state(message.chat.id, 130)
            else:
                await bot.send_message(message.chat.id, '–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!')

        elif get_state(message.chat.id) == 31:
            if message.forward_from:
                result_text = new_author(settings, message.forward_from.id, message.forward_from.username)
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞', '–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞')
                user_markup.row(main_menu)
                await bot.send_message(message.chat.id, result_text, reply_markup=user_markup)
                await log(f'New author {message.forward_from.username} is added by {message.chat.id}')
                delete_state(message.chat.id)
            else:
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞', '–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞')
                user_markup.row(main_menu)
                await bot.send_message(message.chat.id, '–ù–æ–≤—ã–π –∞–≤—Ç–æ—Ä –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω\n'
                                                        '–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–∞, '
                                                        '—á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∞–≤—Ç–æ—Ä–æ–º.',
                                       reply_markup=user_markup)

        elif get_state(message.chat.id) == 32:
            author = str(message.text)
            author = author.split(' - ')
            if int(author[0]) in [int(author[0]) for item in get_author_list() if int(author[0]) in item]:
                try:
                    del_id(Author, int(author[0]))
                except Exception as exc:
                    logging.warning(exc)
                    await log('Author was not deleted')
                else:
                    new_blocked_user(
                        his_id=int(author[0]),
                        his_username=author[1][1:],
                        who_blocked_username=message.chat.username
                    )
                    await bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞')
                    await log(f'The author {message.text} is removed by {message.chat.id}')
                    delete_state(message.chat.id)
            else:
                await bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ id –≤ —Å–ø–∏—Å–∫–∞—Ö –∞–≤—Ç–æ—Ä–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! '
                                                        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id!')
                set_state(message.chat.id, 32)

        elif get_state(message.chat.id) == 41:
            if message.forward_from:
                result_text = new_admin(message.forward_from.id, message.forward_from.username)
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞', '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞')
                user_markup.row(main_menu)
                await bot.send_message(message.chat.id, result_text, reply_markup=user_markup)
                await log(f'New admin {message.forward_from.username} is added by {message.chat.id}')
                delete_state(message.chat.id)
            else:
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞', '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞')
                user_markup.row(main_menu)
                await bot.send_message(message.chat.id, '–ù–æ–≤—ã–π –∞–¥–º–∏–Ω –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω\n'
                                                        '–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–∞, '
                                                        '—á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–æ–º.',
                                       reply_markup=user_markup)

        elif get_state(message.chat.id) == 42:
            admin = str(message.text)
            admin = admin.split(' - ')
            if int(admin[0]) in [int(admin[0]) for item in get_admin_list() if int(admin[0]) in item]:
                try:
                    del_id(Admin, int(admin[0]))
                except Exception as exc:
                    logging.warning(exc)
                    await log('Admin was not deleted')
                else:
                    await bot.send_message(message.chat.id, '–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞')
                    await log(f'The admin {message.text} is removed by {message.chat.id}')
                    delete_state(message.chat.id)
            else:
                await bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ id –≤ —Å–ø–∏—Å–∫–∞—Ö –∞–¥–º–∏–Ω–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! '
                                                        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id!')
                set_state(message.chat.id, 42)

        elif get_state(message.chat.id) == 51:
            if message.forward_from:
                result_text = new_moder(message.forward_from.id, message.forward_from.username)
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', '–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')
                user_markup.row(main_menu)
                await bot.send_message(message.chat.id, result_text, reply_markup=user_markup)
                await log(f'New moder {message.text} is added by {message.chat.id}')
                delete_state(message.chat.id)
            else:
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', '–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')
                user_markup.row(main_menu)
                await bot.send_message(message.chat.id, '–ù–æ–≤—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω\n'
                                                        '–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–∞, '
                                                        '—á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.',
                                       reply_markup=user_markup)

        elif get_state(message.chat.id) == 52:
            moder = str(message.text)
            moder = moder.split(' - ')
            if int(moder[0]) in [int(moder[0]) for item in get_moder_list() if int(moder[0]) in item]:
                try:
                    del_id(Admin, int(moder[0]))
                except Exception as exc:
                    logging.warning(exc)
                    await log('Moder was not deleted')
                else:
                    await bot.send_message(message.chat.id, '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞')
                    await log(f'The moder {message.text} is removed by {message.chat.id}')
                    delete_state(message.chat.id)
            else:
                await bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ id –≤ —Å–ø–∏—Å–∫–∞—Ö –º–æ–¥–µ—Ä–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! '
                                                        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id!')
                set_state(message.chat.id, 52)

        elif get_state(message.chat.id) == 61:
            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            user_markup.row(f'–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.time_zone}')
            user_markup.row(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {settings.channel_name}')
            user_markup.row(f'–ü–æ—Ä–æ–≥ –æ–ø—ã—Ç–∞ –∞–≤—Ç–æ—Ä–∞–º: {settings.threshold_xp}')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /help')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∂–Ω—é—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–æ—Å—Ç–æ–≤')
            user_markup.row('–°–∫–∞—á–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª')
            user_markup.row('–°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î')
            user_markup.row('–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î')
            user_markup.row(main_menu)

            settings.help_text = message.text
            settings.help_text_entities = message

            help_phrase_obj = Phrase.get_or_none(phrase='help_phrase')
            if help_phrase_obj is not None:
                help_phrase_obj.phrase_text = settings.help_text
                help_phrase_obj.phrase_text_entities = settings.help_text_entities
                help_phrase_obj.save()
            else:
                Phrase.create(phrase='help_text',
                              phrase_text=settings.help_text,
                              phrase_text_entities=settings.help_text_entities)

            await bot.send_message(message.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏', reply_markup=user_markup)
            delete_state(message.chat.id)

        elif get_state(message.chat.id) == 62:
            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            user_markup.row(f'–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.time_zone}')
            user_markup.row(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {settings.channel_name}')
            user_markup.row(f'–ü–æ—Ä–æ–≥ –æ–ø—ã—Ç–∞ –∞–≤—Ç–æ—Ä–∞–º: {settings.threshold_xp}')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /help')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∂–Ω—é—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–æ—Å—Ç–æ–≤')
            user_markup.row('–°–∫–∞—á–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª')
            user_markup.row('–°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î')
            user_markup.row('–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î')
            user_markup.row(main_menu)

            settings.footer_text = message.text
            settings.footer_text_entities = message

            footer_phrase_obj = Phrase.get_or_none(phrase='footer_phrase')
            if footer_phrase_obj is not None:
                footer_phrase_obj.phrase_text = settings.footer_text
                footer_phrase_obj.phrase_text_entities = settings.footer_text_entities
                footer_phrase_obj.save()
            else:
                Phrase.create(phrase='footer_phrase',
                              phrase_text=settings.footer_text,
                              phrase_text_entities=settings.footer_text_entities)

            await bot.send_message(message.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π footer', reply_markup=user_markup)
            delete_state(message.chat.id)

        elif get_state(message.chat.id) == 63:
            if message.text.isdigit():
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row(f'–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.time_zone}')
                user_markup.row(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {settings.channel_name}')
                user_markup.row(f'–ü–æ—Ä–æ–≥ –æ–ø—ã—Ç–∞ –∞–≤—Ç–æ—Ä–∞–º: {settings.threshold_xp}')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /help')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∂–Ω—é—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–æ—Å—Ç–æ–≤')
                user_markup.row('–°–∫–∞—á–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª')
                user_markup.row('–°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î')
                user_markup.row('–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î')
                user_markup.row(main_menu)

                settings.threshold_xp = int(message.text)

                change_settings(settings)

                await bot.send_message(message.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥', reply_markup=user_markup)
                delete_state(message.chat.id)
            else:
                user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
                user_markup.row(main_menu)

                await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ß–ò–°–õ–û', reply_markup=user_markup)
    else:
        entity_list = []
        entity = MessageEntity(type="text_link",
                               offset=len("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                          "–ø—Ä–æ—è–≤–∏—Ç–µ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ "),
                               length=len('HareCrypta'),
                               url='https://t.me/harecrypta_chat')
        entity_list.append(entity)
        await bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                                "–ø—Ä–æ—è–≤–∏—Ç–µ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ HareCrypta.",
                               entities=entity_list, disable_web_page_preview=True)


async def bot_inline(bot: Bot, callback_query: CallbackQuery, settings: Settings):
    current_user = object

    for table in [Admin, Author, BlockedUser]:
        for obj in table.select():
            if obj.profile.user_id == callback_query.message.chat.id:
                current_user = obj
                break

    if isinstance(current_user, BlockedUser):
        await bot.send_message(callback_query.message.chat.id, "–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!")
        delete_state(callback_query.message.chat.id)
    elif isinstance(current_user, (Admin, Author)) or callback_query.message.chat.id == admin_id:
        if callback_query.data == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            if get_state(callback_query.message.chat.id):
                delete_state(callback_query.message.chat.id)
            if get_chat_value_message(callback_query.message):
                delete_chat_value_message(callback_query.message)

            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            user_markup.row('–ü–æ—Å—Ç—ã')
            user_markup.row('–°–ø–∏—Å–∫–∏')
            if current_user.permissions == 'admin_permissions':
                user_markup.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞')

            # —É–¥–∞–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
            await bot.send_message(callback_query.message.chat.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞.',
                                   reply_markup=user_markup)

        elif callback_query.data == '–ï—Å—Ç—å –¥–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            key = InlineKeyboardMarkup()
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω',
                                   reply_markup=key)

            set_state(callback_query.message.chat.id, 3)

        elif callback_query.data == '–ù–µ—Ç –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            set_chat_value_message(callback_query.message, 3)

            key = InlineKeyboardMarkup()
            key.row(InlineKeyboardButton(text='–î–ê', callback_data='–ï—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'),
                    InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'))
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(callback_query.message.chat.id, '–ù—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —É—á–∞—Å—Ç–∏—è?',
                                   reply_markup=key)

        elif callback_query.data == '–ï—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            key = InlineKeyboardMarkup()
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —É—á–∞—Å—Ç–∏—è',
                                   reply_markup=key)

            set_state(callback_query.message.chat.id, 4)

        elif callback_query.data == '–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            set_chat_value_message(callback_query.message, 4)

            key = InlineKeyboardMarkup()
            key.row(InlineKeyboardButton(text='–î–ê', callback_data='–ï—Å—Ç—å —Å–∞–π—Ç'),
                    InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ù–µ—Ç —Å–∞–π—Ç–∞'))
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(callback_query.message.chat.id, '–ï—Å—Ç—å –ª–∏ —Å–∞–π—Ç —É –ø—Ä–æ–µ–∫—Ç–∞?', reply_markup=key)

        elif callback_query.data == '–ï—Å—Ç—å —Å–∞–π—Ç':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            key = InlineKeyboardMarkup()
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞ üåê\n'
                                                                   '(–≤ —Ñ–æ—Ä–º–∞—Ç–µ http://example.com)',
                                   reply_markup=key)

            set_state(callback_query.message.chat.id, 5)

        elif callback_query.data == '–ù–µ—Ç —Å–∞–π—Ç–∞':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            set_chat_value_message(callback_query.message, 5)

            key = InlineKeyboardMarkup()
            key.row(InlineKeyboardButton(text='–î–ê', callback_data='–ï—Å—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä'),
                    InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ù–µ—Ç —Ç–≤–∏—Ç—Ç–µ—Ä–∞'))
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(callback_query.message.chat.id, '–ï—Å—Ç—å –ª–∏ —Ç–≤–∏—Ç—Ç–µ—Ä —É –ø—Ä–æ–µ–∫—Ç–∞?', reply_markup=key)

        elif callback_query.data == '–ï—Å—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            key = InlineKeyboardMarkup()
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–∏—Ç—Ç–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ üê¶\n'
                                                                   '(–≤ —Ñ–æ—Ä–º–∞—Ç–µ http://example.com)',
                                   reply_markup=key)

            set_state(callback_query.message.chat.id, 6)

        elif callback_query.data == '–ù–µ—Ç —Ç–≤–∏—Ç—Ç–µ—Ä–∞':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            set_chat_value_message(callback_query.message, 6)

            key = InlineKeyboardMarkup()
            key.row(InlineKeyboardButton(text='–î–ê', callback_data='–ï—Å—Ç—å –¥–∏—Å–∫–æ—Ä–¥'),
                    InlineKeyboardButton(text='–ù–ï–¢', callback_data='–ù–µ—Ç –¥–∏—Å–∫–æ—Ä–¥–∞'))
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(callback_query.message.chat.id, '–ï—Å—Ç—å –ª–∏ –¥–∏—Å–∫–æ—Ä–¥ —É –ø—Ä–æ–µ–∫—Ç–∞?', reply_markup=key)

        elif callback_query.data == '–ï—Å—Ç—å –¥–∏—Å–∫–æ—Ä–¥':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            key = InlineKeyboardMarkup()
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏—Å–∫–æ—Ä–¥ –ø—Ä–æ–µ–∫—Ç–∞ üëæ\n'
                                                                   '(–≤ —Ñ–æ—Ä–º–∞—Ç–µ http://example.com)',
                                   reply_markup=key)

            set_state(callback_query.message.chat.id, 7)

        elif callback_query.data == '–ù–µ—Ç –¥–∏—Å–∫–æ—Ä–¥–∞':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            set_chat_value_message(callback_query.message, 7)

            key = InlineKeyboardMarkup()
            key.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                         callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(callback_query.message.chat.id, '–í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!!! '
                                                                   '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ—Å—å, –±—É–¥–µ—Ç –ª–∏ –≤ –Ω—ë–º –∫–∞—Ä—Ç–∏–Ω–∫–∞.'
                                                                   '–ï—Å–ª–∏ –≤—ã –Ω–µ –¥–æ–±–∞–≤–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—Ä–∞–∑—É, '
                                                                   '—Ç–æ –ø–æ—Ç–æ–º –≤—ã –µ—ë –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–∂–µ –¥–æ–±–∞–≤–∏—Ç—å, '
                                                                   '–∏ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É–∂–µ –±—ã–ª–∞,'
                                                                   '—Ç–æ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –µ—ë —É–±—Ä–∞—Ç—å!')
            await bot.send_message(callback_query.message.chat.id, '–í—Å—Ç–∞–≤—å—Ç–µ –±–∞–Ω–Ω–µ—Ä (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –ø–æ—Å—Ç–∞.'
                                                                   '–ò–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –±–∞–Ω–Ω–µ—Ä–∞, —Ç–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /empty.',
                                   reply_markup=key)

            set_state(callback_query.message.chat.id, 8)

        elif callback_query.data == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–≤–∏—Ç—Ç–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å–∫–æ—Ä–¥')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä', '–ò–∑–º–µ–Ω–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏')
            user_markup.row(main_menu)
            await bot.send_message(callback_query.message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                   reply_markup=user_markup)
            set_state(callback_query.message.chat.id, 130)

        elif callback_query.data == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

            await bot.send_message(callback_query.message.chat.id,
                                   "–í –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞ —Å–µ–π—á–∞—Å –Ω–∞–ø–∏—à–∏—Ç–µ '–î–∞'. "
                                   "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å - –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ")
            set_state(callback_query.message.chat.id, 10)

        elif callback_query.data == '–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
            entity_list = []
            unposted_post = get_chat_value_message(callback_query.message)
            text = f"{unposted_post['post_name']}\n\n" \
                   f"{unposted_post['post_desc']}\n\n"

            if unposted_post['what_needs'] != '':
                text += f"‚úÖ {unposted_post['what_needs']}\n\n"

            if unposted_post['post_date'] != '':
                text += f"üìÜ {unposted_post['post_date']}\n\n"

            if unposted_post['site'] != '' or unposted_post['twitter'] != '' or unposted_post['discord'] != '':
                text += "üîó "
                if unposted_post['site'] != '':
                    text += "–°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞ "
                if unposted_post['twitter'] != '':
                    if unposted_post['site'] == '':
                        text += "Twitter "
                    else:
                        text += "| Twitter "
                if unposted_post['discord'] != '':
                    if unposted_post['site'] == '' and unposted_post['twitter'] == '':
                        text += "Discord"
                    else:
                        text += "| Discord"
                text += "\n\n"

            text += f"{unposted_post['hashtags']}\n\n" \
                    f"–ê–≤—Ç–æ—Ä: @{unposted_post['author_name']}\n" \
                    f"{settings.footer_text}"

            name_entities = json.loads(str(unposted_post['name_entities']))
            description_entities = json.loads(str(unposted_post['desc_entities']))
            date_entities = json.loads(str(unposted_post['date_entities']))
            what_needs_entities = json.loads(str(unposted_post['what_needs_entities']))
            footer_text_entities = json.loads(str(settings.footer_text_entities))

            count_string_track = 0

            entity = MessageEntity(type="bold",
                                   offset=count_string_track,
                                   length=len(str(unposted_post['post_name'])) +
                                          emoji_count(str(unposted_post['post_name'])))
            entity_list.append(entity)

            if "entities" in name_entities:
                entity_list = entity_read(name_entities, entity_list, count_string_track)

            count_string_track += len(str(unposted_post['post_name'])) + len("\n\n") + \
                                  emoji_count(str(unposted_post['post_name']))

            if "entities" in description_entities:
                entity_list = entity_read(description_entities, entity_list, count_string_track)

            count_string_track += len(str(unposted_post['post_desc'])) + len("\n\n") + \
                                  emoji_count(str(unposted_post['post_desc']))

            if unposted_post['what_needs'] != '':
                count_string_track += len(str('‚úÖ '))

                if "entities" in what_needs_entities:
                    entity_list = entity_read(what_needs_entities, entity_list, count_string_track)

                count_string_track += len(str(unposted_post['what_needs'])) + len("\n\n") + \
                                      emoji_count(str(unposted_post['what_needs']))

            if unposted_post['post_date'] != '':
                count_string_track += len(str('üìÜ ')) + 1

                if "entities" in date_entities:
                    entity_list = entity_read(date_entities, entity_list, count_string_track)

                count_string_track += len(str(unposted_post['post_date'])) + len("\n\n") + \
                                      emoji_count(str(unposted_post['post_date']))

            if unposted_post['site'] != '' or unposted_post['twitter'] != '' or unposted_post['discord'] != '':
                count_string_track += len(str("üîó ")) + 1
                if unposted_post['site'] != '':
                    entity = MessageEntity(type="text_link",
                                           offset=count_string_track,
                                           length=len("–°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞"),
                                           url=f"{unposted_post['site']}")
                    entity_list.append(entity)
                    count_string_track += len("–°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞ ")
                if unposted_post['twitter'] != '':
                    if unposted_post['site'] == '':
                        entity = MessageEntity(type="text_link",
                                               offset=count_string_track,
                                               length=len("Twitter"),
                                               url=f"{unposted_post['twitter']}")
                        entity_list.append(entity)
                        count_string_track += len("Twitter ")
                    else:
                        entity = MessageEntity(type="text_link",
                                               offset=count_string_track + len("| "),
                                               length=len("Twitter"),
                                               url=f"{unposted_post['twitter']}")
                        entity_list.append(entity)
                        count_string_track += len("| Twitter ")
                if unposted_post['discord'] != '':
                    if unposted_post['site'] == '' and unposted_post['twitter'] == '':
                        entity = MessageEntity(type="text_link",
                                               offset=count_string_track,
                                               length=len("Discord"),
                                               url=f"{unposted_post['discord']}")
                        entity_list.append(entity)
                        count_string_track += len("Discord")
                    else:
                        entity = MessageEntity(type="text_link",
                                               offset=count_string_track + len("| "),
                                               length=len("Discord"),
                                               url=f"{unposted_post['discord']}")
                        entity_list.append(entity)
                        count_string_track += len("| Discord")
                count_string_track += len("\n\n")

            count_string_track += len(str(unposted_post['hashtags'])) + len("\n\n")

            entity = MessageEntity(type="italic",
                                   offset=count_string_track,
                                   length=len('–ê–≤—Ç–æ—Ä'))
            entity_list.append(entity)

            count_string_track += len(f"–ê–≤—Ç–æ—Ä: @{unposted_post['author_name']}\n")

            if "entities" in footer_text_entities:
                entity_list = entity_read(footer_text_entities, entity_list, count_string_track)

            count_string_track += len(f"{settings.footer_text}")

            if type(unposted_post['pic_post']) is tuple:
                if unposted_post['pic_post'][0] == '':
                    try:
                        message_result = await bot.send_message(settings.channel_name, text, entities=entity_list)
                    except Exception as e:
                        logging.warning(e)
                    else:
                        await log(
                            f"Post {str(unposted_post['post_name'])} is posted by {callback_query.message.chat.id}")

                        post_for_pos = Post.get(Post.post_name == str(unposted_post['post_name']))
                        post_for_pos.message_id = message_result.message_id
                        post_for_pos.status = 1
                        post_for_pos.save()

                        try:
                            await bot.forward_message(chat_id=settings.group_forward_id,
                                                      from_chat_id=settings.channel_name,
                                                      message_id=message_result.message_id)
                        except Exception as e:
                            logging.warning(e)
                else:
                    photo = open(unposted_post['pic_post'][0], 'rb')
                    try:
                        message_result = await bot.send_photo(settings.channel_name,
                                                              photo, caption=text, caption_entities=entity_list)
                    except Exception as e:
                        logging.warning(e)
                    else:
                        await log(
                            f"Post {str(unposted_post['post_name'])} is posted by {callback_query.message.chat.id}")

                        post_for_pos = Post.get(Post.post_name == str(unposted_post['post_name']))
                        post_for_pos.message_id = message_result.message_id
                        post_for_pos.status = 1
                        post_for_pos.save()

                        try:
                            await bot.forward_message(chat_id=settings.group_forward_id,
                                                      from_chat_id=settings.channel_name,
                                                      message_id=message_result.message_id)
                        except Exception as e:
                            logging.warning(e)
            else:
                if unposted_post['pic_post'] == '':
                    try:
                        message_result = await bot.send_message(settings.channel_name, text, entities=entity_list)
                    except Exception as e:
                        logging.warning(e)
                    else:
                        await log(
                            f"Post {str(unposted_post['post_name'])} is posted by {callback_query.message.chat.id}")

                        post_for_pos = Post.get(Post.post_name == str(unposted_post['post_name']))
                        post_for_pos.message_id = message_result.message_id
                        post_for_pos.status = 1
                        post_for_pos.save()

                        try:
                            await bot.forward_message(chat_id=settings.group_forward_id,
                                                      from_chat_id=settings.channel_name,
                                                      message_id=message_result.message_id)
                        except Exception as e:
                            logging.warning(e)
                else:
                    photo = open(unposted_post['pic_post'], 'rb')
                    try:
                        message_result = await bot.send_photo(settings.channel_name,
                                                              photo, caption=text, caption_entities=entity_list)
                    except Exception as e:
                        logging.warning(e)
                    else:
                        await log(
                            f"Post {str(unposted_post['post_name'])} is posted by {callback_query.message.chat.id}")

                        post_for_pos = Post.get(Post.post_name == str(unposted_post['post_name']))
                        post_for_pos.message_id = message_result.message_id
                        post_for_pos.status = 1
                        post_for_pos.save()

                        try:
                            await bot.forward_message(chat_id=settings.group_forward_id,
                                                      from_chat_id=settings.channel_name,
                                                      message_id=message_result.message_id)
                        except Exception as e:
                            logging.warning(e)

            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            user_markup.row('–ü–æ—Å—Ç—ã')
            user_markup.row('–°–ø–∏—Å–∫–∏')
            if current_user.permissions == 'admin_permissions':
                user_markup.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞')

            await bot.send_message(callback_query.message.chat.id, '–ü–æ—Å—Ç –±—ã–ª —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª–µ.',
                                   reply_markup=user_markup)

            delete_chat_value_message(callback_query.message)
            delete_state(callback_query.message.chat.id)

        elif callback_query.data == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è':
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
            user_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            a = 0
            for post in Post.select():
                if not post.status:
                    a += 1
                    user_markup.row(str(post.post_name))

            if a == 0:
                await bot.send_message(callback_query.message.chat.id, '–ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç!',
                                       reply_markup=user_markup)
            else:
                user_markup.row(main_menu)
                await bot.send_message(callback_query.message.chat.id, '–ö–∞–∫–æ–π –ø–æ—Å—Ç —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å?',
                                       parse_mode='Markdown', reply_markup=user_markup)
                set_state(callback_query.message.chat.id, 90)

            delete_chat_value_message(callback_query.message)
    else:
        entity_list = []
        entity = MessageEntity(type="text_link",
                               offset=len("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                          "–ø—Ä–æ—è–≤–∏—Ç–µ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ "),
                               length=len('HareCrypta'),
                               url='https://t.me/harecrypta_chat')
        entity_list.append(entity)
        await bot.send_message(callback_query.message.chat.id,
                               "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                               "–ø—Ä–æ—è–≤–∏—Ç–µ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ HareCrypta.",
                               entities=entity_list, disable_web_page_preview=True)
